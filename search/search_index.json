{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"ACTS-CVS1/","text":"Ciclo de vida del Software Define \"Ciclo de vida del Software\" Proceso de desarrollo de un software Nombra las fases principales en que consiste el modelo de cascada cuando hablamos de desarrollo de software Analisis --> determinacion y definicion clara de las necesidades del cliente y especificacion de los requisitos a cumplir el software desarrollado Dise\u00f1o --> descomposicion y organizacion del sistema en elementos componentes desarrollables por separado Codificacion --> escritura del codigo fuente de cada componente Pruebas --> conseguir que el programa falle y descubrir defectos Mantenimiento --> rehacer parte del trabajo anterior Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de software. Se trata de un modelo en el que el resultado de una fase principal es el comienzo de la otra. Ventajas e inconvenientes del modelo en cascada Es un modelo rigido que se adapta mal al cambio continuo de especificaciones. \u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n? Verificacion -> proceso de comprobar si el software funciona correctamente Validacion -> lo mismo Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos. Durante la fase de analisis se crea un prototipo probado por el usuario para refinar los requisitos del software a desarrollar. Esto se hace las veces que hagan falta.","title":"Ciclo de vida del Software"},{"location":"ACTS-CVS1/#ciclo-de-vida-del-software","text":"Define \"Ciclo de vida del Software\" Proceso de desarrollo de un software Nombra las fases principales en que consiste el modelo de cascada cuando hablamos de desarrollo de software Analisis --> determinacion y definicion clara de las necesidades del cliente y especificacion de los requisitos a cumplir el software desarrollado Dise\u00f1o --> descomposicion y organizacion del sistema en elementos componentes desarrollables por separado Codificacion --> escritura del codigo fuente de cada componente Pruebas --> conseguir que el programa falle y descubrir defectos Mantenimiento --> rehacer parte del trabajo anterior Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de software. Se trata de un modelo en el que el resultado de una fase principal es el comienzo de la otra. Ventajas e inconvenientes del modelo en cascada Es un modelo rigido que se adapta mal al cambio continuo de especificaciones. \u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n? Verificacion -> proceso de comprobar si el software funciona correctamente Validacion -> lo mismo Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos. Durante la fase de analisis se crea un prototipo probado por el usuario para refinar los requisitos del software a desarrollar. Esto se hace las veces que hagan falta.","title":"Ciclo de vida del Software"},{"location":"ACTS-CVS2/","text":"CICLO DE VIDA DEL SOFTWARE 1. KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Puedes consultar el siguiente enlace: Se trata de un marco de trabajo muy popular a la hora de implementar un desarrollo de software \u00e1gil y de DevOps. Requiere una comunicaci\u00f3n en tiempo real sobre la capacidad y una total transparencia del trabajo. Los elementos de trabajo se representan visualmente en un tablero de kanban, lo que permite a los miembros del equipo ver el estado de cada uno en cualquier momento. 2. SCRUM. Explica como funciona Scrum. Es un proceso en el que se aplican de manera regular un conjunto de buenas pr\u00e1cticas para trabajar colaborativamente, en equipo, y obtener el mejor resultado posible de un proyecto. Estas pr\u00e1cticas se apoyan unas a otras y su selecci\u00f3n tiene origen en un estudio de la manera de trabajar de equipos altamente productivos. 3. SCRUM. Define los siguientes t\u00e9rminos: Product backlog --> listado de todas las tareas que se pretenden hacer durante el desarrollo de un proyecto. Sprint backlog --> es la suma de el Objetivo del Sprint, los elementos del Product Backlog elegidos para el Sprint, m\u00e1s un plan de acci\u00f3n de c\u00f3mo crear el Incremento de Producto. 4. SCRUM. En la terminolog\u00eda Scrum qu\u00e9 terminos se utilizan como sin\u00f3nimo de: Jefe de proyecto --> Scrum Master Cliente --> Product Owner Equipo de desarrollo --> Developer Team/Team 5. SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum. Los siguientes puntos son de especial importancia para la implantaci\u00f3n de una gesti\u00f3n \u00e1gil de proyectos como Scrum: Cultura de empresa basada en trabajo en equipo, delegaci\u00f3n, creatividad y mejora continua. Compromiso del cliente en la direcci\u00f3n de los resultados del proyecto, gesti\u00f3n del ROI y disponibilidad para poder colaborar. Compromiso de la Direcci\u00f3n de la organizaci\u00f3n para resolver problemas end\u00e9micos y realizar cambios organizativos, formando equipos autogestionados y multidisciplinares y fomentando una cultura de gesti\u00f3n basada en la colaboraci\u00f3n y en la facilitaci\u00f3n llevada a cabo por l\u00edderes al servicio del equipo. Compromiso conjunto y colaboraci\u00f3n de los miembros del equipo. Relaci\u00f3n entre proveedor y cliente basada en ganar-ganar, colaboraci\u00f3n y transparencia. Facilidad para realizar cambios en el proyecto. Tama\u00f1o de cada equipo entre 5 y 9 personas (con t\u00e9cnicas espec\u00edficas de planificaci\u00f3n y coordinaci\u00f3n cuando varios equipos trabajan en el mismo proyecto). Equipo trabajando en un mismo espacio com\u00fan para maximizar la comunicaci\u00f3n. Dedicaci\u00f3n del equipo a tiempo completo. Estabilidad de los miembros del equipo 6. XP. Explica los 5 valores de la Programaci\u00f3n Extrema. Simplicidad --> Desarrollaremos lo que sea solicitado y necesario, pero no m\u00e1s que eso. De esa forma, se maximiza el valor de la inversi\u00f3n realizada. Nos dirigiremos a nuestro objetivo a pasos simples y peque\u00f1os, mitigando las fallas a medida que ocurran. Comunicacion --> Todos son parte del equipo y nos comunicamos cara a cara todos los d\u00edas. Trabajamos juntos en todo, desde los requerimientos hasta la programaci\u00f3n. Retroalimentacion --> Mostraremos al usuario nuestro software frecuentemente y de forma temprana, escuchando cuidadosamente sus observaciones y realizando los cambios que sean necesarios. Coraje --> Diremos la verdad en nuestros avances y estimados, no documentaremos excusas para el fracaso, pues planificamos para tener \u00e9xito. No tendremos miedo a nada pues sabemos que nadie trabaja solo. Nos adaptaremos a los cambios cuando sea que estos ocurran. Respeto --> Todos en el equipo dan y reciben el respeto que merecen como integrantes del equipo y los aportes de cada integrante son valorados valorados por todos. Todos contribuyen, as\u00ed sea simplemente con entusiasmo. Los desarrolladores respetan la experticia de los clientes y viceversa. 7. XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas. Se considera al equipo de proyecto como el principal factor de \u00e9xito del proyecto. Software que funciona por encima de una buena documentaci\u00f3n. Interacci\u00f3n constante entre el cliente y el equipo de desarrollo. Planificaci\u00f3n flexible y abierta. R\u00e1pida respuesta a cambios.","title":"CICLO DE VIDA DEL SOFTWARE"},{"location":"ACTS-CVS2/#ciclo-de-vida-del-software","text":"","title":"CICLO DE VIDA DEL SOFTWARE"},{"location":"ACTS-CVS2/#1-kanban-haz-un-resumen-de-la-metodologia-kanban-e-indica-sus-diferencias-frente-a-scrum-puedes-consultar-el-siguiente-enlace","text":"Se trata de un marco de trabajo muy popular a la hora de implementar un desarrollo de software \u00e1gil y de DevOps. Requiere una comunicaci\u00f3n en tiempo real sobre la capacidad y una total transparencia del trabajo. Los elementos de trabajo se representan visualmente en un tablero de kanban, lo que permite a los miembros del equipo ver el estado de cada uno en cualquier momento.","title":"1. KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Puedes consultar el siguiente enlace:"},{"location":"ACTS-CVS2/#2-scrum-explica-como-funciona-scrum","text":"Es un proceso en el que se aplican de manera regular un conjunto de buenas pr\u00e1cticas para trabajar colaborativamente, en equipo, y obtener el mejor resultado posible de un proyecto. Estas pr\u00e1cticas se apoyan unas a otras y su selecci\u00f3n tiene origen en un estudio de la manera de trabajar de equipos altamente productivos.","title":"2. SCRUM. Explica como funciona Scrum."},{"location":"ACTS-CVS2/#3-scrum-define-los-siguientes-terminos","text":"Product backlog --> listado de todas las tareas que se pretenden hacer durante el desarrollo de un proyecto. Sprint backlog --> es la suma de el Objetivo del Sprint, los elementos del Product Backlog elegidos para el Sprint, m\u00e1s un plan de acci\u00f3n de c\u00f3mo crear el Incremento de Producto.","title":"3. SCRUM. Define los siguientes t\u00e9rminos:"},{"location":"ACTS-CVS2/#4-scrum-en-la-terminologia-scrum-que-terminos-se-utilizan-como-sinonimo-de","text":"Jefe de proyecto --> Scrum Master Cliente --> Product Owner Equipo de desarrollo --> Developer Team/Team","title":"4. SCRUM. En la terminolog\u00eda Scrum qu\u00e9 terminos se utilizan como sin\u00f3nimo de:"},{"location":"ACTS-CVS2/#5-scrum-haz-un-resumen-de-los-requisitos-para-poder-utilizar-scrum","text":"Los siguientes puntos son de especial importancia para la implantaci\u00f3n de una gesti\u00f3n \u00e1gil de proyectos como Scrum: Cultura de empresa basada en trabajo en equipo, delegaci\u00f3n, creatividad y mejora continua. Compromiso del cliente en la direcci\u00f3n de los resultados del proyecto, gesti\u00f3n del ROI y disponibilidad para poder colaborar. Compromiso de la Direcci\u00f3n de la organizaci\u00f3n para resolver problemas end\u00e9micos y realizar cambios organizativos, formando equipos autogestionados y multidisciplinares y fomentando una cultura de gesti\u00f3n basada en la colaboraci\u00f3n y en la facilitaci\u00f3n llevada a cabo por l\u00edderes al servicio del equipo. Compromiso conjunto y colaboraci\u00f3n de los miembros del equipo. Relaci\u00f3n entre proveedor y cliente basada en ganar-ganar, colaboraci\u00f3n y transparencia. Facilidad para realizar cambios en el proyecto. Tama\u00f1o de cada equipo entre 5 y 9 personas (con t\u00e9cnicas espec\u00edficas de planificaci\u00f3n y coordinaci\u00f3n cuando varios equipos trabajan en el mismo proyecto). Equipo trabajando en un mismo espacio com\u00fan para maximizar la comunicaci\u00f3n. Dedicaci\u00f3n del equipo a tiempo completo. Estabilidad de los miembros del equipo","title":"5. SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum."},{"location":"ACTS-CVS2/#6-xp-explica-los-5-valores-de-la-programacion-extrema","text":"Simplicidad --> Desarrollaremos lo que sea solicitado y necesario, pero no m\u00e1s que eso. De esa forma, se maximiza el valor de la inversi\u00f3n realizada. Nos dirigiremos a nuestro objetivo a pasos simples y peque\u00f1os, mitigando las fallas a medida que ocurran. Comunicacion --> Todos son parte del equipo y nos comunicamos cara a cara todos los d\u00edas. Trabajamos juntos en todo, desde los requerimientos hasta la programaci\u00f3n. Retroalimentacion --> Mostraremos al usuario nuestro software frecuentemente y de forma temprana, escuchando cuidadosamente sus observaciones y realizando los cambios que sean necesarios. Coraje --> Diremos la verdad en nuestros avances y estimados, no documentaremos excusas para el fracaso, pues planificamos para tener \u00e9xito. No tendremos miedo a nada pues sabemos que nadie trabaja solo. Nos adaptaremos a los cambios cuando sea que estos ocurran. Respeto --> Todos en el equipo dan y reciben el respeto que merecen como integrantes del equipo y los aportes de cada integrante son valorados valorados por todos. Todos contribuyen, as\u00ed sea simplemente con entusiasmo. Los desarrolladores respetan la experticia de los clientes y viceversa.","title":"6. XP. Explica los 5 valores de la Programaci\u00f3n Extrema."},{"location":"ACTS-CVS2/#7-xp-cuales-son-las-caracteristicas-distintivas-de-xp-frente-a-otras-metodologias-agiles-explicalas","text":"Se considera al equipo de proyecto como el principal factor de \u00e9xito del proyecto. Software que funciona por encima de una buena documentaci\u00f3n. Interacci\u00f3n constante entre el cliente y el equipo de desarrollo. Planificaci\u00f3n flexible y abierta. R\u00e1pida respuesta a cambios.","title":"7. XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras  metodolog\u00edas \u00e1giles? Expl\u00edcalas."},{"location":"acts/","text":"ENTORNOS DE DESARROLLO INTEGRADO 1. Instala el editor sublime text. Saca una captura de pantalla una vez instalado. 2. Personaliza Sublime text instalando los complementos m\u00e1s importantes. Package Control instalado Emmet SideBarEnhacements HTML-CSS-JS Prettify Color Highlighter BracketHighlighter HTML5 Terminal JavaScriptNext PackageDev 3. \u00bfPara que sirve el complemento Emmet ? Haz uso de \u00e9l al escribir un archivo html de prueba. Emmet es un conjunto de complementos para editores de texto que permiten la codificaci\u00f3n y edici\u00f3n de alta velocidad en HTML, XML, XSL y otros formatos de c\u00f3digo estructurado a trav\u00e9s de la asistencia de contenido. Emmet, escribe c\u00f3digo HTML y CSS a base de abreviaciones. 4. Instala el editor Visual Studio Code. Saca una captura de pantalla una vez instalado y funcionando. 6. \u00bfQu\u00e9 paquetes b\u00e1sicos debemos instalar en Ubuntu para desarrollar en Java? Debemos instalar un JDK (Java Development Kit), ya sea el oficial de Oracle u Open JDK. 7. Instala el entorno integrado Netbeans. Saca una captura de pantalla una vez instalado y funcionando.","title":"ENTORNOS DE DESARROLLO INTEGRADO"},{"location":"acts/#entornos-de-desarrollo-integrado","text":"","title":"ENTORNOS DE DESARROLLO INTEGRADO"},{"location":"acts/#1-instala-el-editor-sublime-text-saca-una-captura-de-pantalla-una-vez-instalado","text":"","title":"1. Instala el editor sublime text. Saca una captura de pantalla una vez instalado."},{"location":"acts/#2-personaliza-sublime-text-instalando-los-complementos-mas-importantes","text":"Package Control instalado Emmet SideBarEnhacements HTML-CSS-JS Prettify Color Highlighter BracketHighlighter HTML5 Terminal JavaScriptNext PackageDev","title":"2. Personaliza Sublime text instalando los complementos m\u00e1s importantes."},{"location":"acts/#3-para-que-sirve-el-complemento-emmet-haz-uso-de-el-al-escribir-un-archivo-html-de-prueba","text":"Emmet es un conjunto de complementos para editores de texto que permiten la codificaci\u00f3n y edici\u00f3n de alta velocidad en HTML, XML, XSL y otros formatos de c\u00f3digo estructurado a trav\u00e9s de la asistencia de contenido. Emmet, escribe c\u00f3digo HTML y CSS a base de abreviaciones.","title":"3. \u00bfPara que sirve el complemento Emmet? Haz uso de \u00e9l al escribir un archivo html de prueba."},{"location":"acts/#4-instala-el-editor-visual-studio-code-saca-una-captura-de-pantalla-una-vez-instalado-y-funcionando","text":"","title":"4. Instala el editor Visual Studio Code. Saca una captura de pantalla una vez instalado y funcionando."},{"location":"acts/#6-que-paquetes-basicos-debemos-instalar-en-ubuntu-para-desarrollar-en-java","text":"Debemos instalar un JDK (Java Development Kit), ya sea el oficial de Oracle u Open JDK.","title":"6. \u00bfQu\u00e9 paquetes b\u00e1sicos debemos instalar en Ubuntu para desarrollar en Java?"},{"location":"acts/#7-instala-el-entorno-integrado-netbeans-saca-una-captura-de-pantalla-una-vez-instalado-y-funcionando","text":"","title":"7. Instala el entorno integrado Netbeans. Saca una captura de pantalla una vez instalado y funcionando."},{"location":"clases/","text":"ACTIVIDADES UNIDAD 5: DIAGRAMAS DE CLASES UML 1. \u00bfQu\u00e9 significan las siglas UML? Busca informaci\u00f3n acerca de su historia y las versiones que han existido y el a\u00f1o de publicaci\u00f3n. UML se refiere a Lenguaje de Modelado Unificado, el cual fue creado por expertos en modelado de objetos en la d\u00e9cada de 1990 con la intenci\u00f3n de brindar un lenguaje com\u00fan para describir y representar sistemas de software. La primera versi\u00f3n de UML fue publicada en 1997 y ha habido una serie de actualizaciones desde entonces, incluidas UML 1.x, UML 2.0, UML 2.1, UML 2.2, UML 2.3, UML 2.4 y UML 2.5. 2. Indica los tipos de diagramas de estructura que existen en UML. En UML, los diagramas de estructura incluyen el Diagrama de Clases, el Diagrama de Objetos, el Diagrama de Componentes, el Diagrama de Paquetes, el Diagrama de Estructura de Componentes, y el Diagrama de Composici\u00f3n. 3. Indica los tipos de relaciones que pueden darse y explica brevemente. Los diagramas de comportamiento incluyen el Diagrama de Secuencia, el Diagrama de Colaboraci\u00f3n, el Diagrama de Estados, el Diagrama de Actividades, el Diagrama de Casos de Uso, y el Diagrama de Interacci\u00f3n. DIAGRAMAS DE CLASES 1. Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de clases distintos a los vistos en este tema. Clase \"Producto\" Atributos: idProducto, nombre, descripcion, precio, stock M\u00e9todos: agregarStock(int cantidad), disminuirStock(int cantidad), calcularPrecioOferta(float descuento) Clase \"OrdenDeCompra\" Atributos: idOrden, fecha, proveedor, total M\u00e9todos: agregarProducto(Producto p, int cantidad), eliminarProducto(Producto p), calcularTotal(), enviarOrden() 2. Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de interfaces distintos a los vistos en este tema. Interfaz \"Pagar\" M\u00e9todos: realizarPago(float monto), obtenerTotal(), cancelarPago() Interfaz \"Autenticar\" M\u00e9todos: iniciarSesion(String usuario, String contrase\u00f1a), cerrarSesion(), cambiarContrase\u00f1a(String nuevaContrase\u00f1a) 3. Indica los tipos de relaciones que pueden darse y explica brevemente. Asociaci\u00f3n: Es una relaci\u00f3n b\u00e1sica que indica que dos elementos est\u00e1n relacionados de alguna manera. Se puede especificar la multiplicidad, que indica cu\u00e1ntos objetos de cada clase pueden estar relacionados. Herencia: Es una relaci\u00f3n en la que una clase hereda atributos y m\u00e9todos de otra clase (clase padre). La clase que hereda se conoce como clase hija o subclase. Dependencia: Es una relaci\u00f3n en la que un elemento de modelo depende de otro elemento para su especificaci\u00f3n o implementaci\u00f3n. Por ejemplo, una clase puede depender de una interfaz para implementar sus m\u00e9todos. Agregaci\u00f3n: Es una relaci\u00f3n de tipo \"todo-parte\" en la que una clase contiene una colecci\u00f3n de objetos de otra clase, pero los objetos pueden existir fuera de la clase contenedora. Composici\u00f3n: Es una relaci\u00f3n similar a la agregaci\u00f3n, pero los objetos de la clase contenida son parte integral de la clase contenedora y no pueden existir fuera de ella. Realizaci\u00f3n: Es una relaci\u00f3n en la que una clase implementa los m\u00e9todos de una interfaz. Generalizaci\u00f3n: Es una relaci\u00f3n entre dos elementos de modelo, donde uno es un caso especial del otro. En otras palabras, una clase m\u00e1s general puede ser especializada en una subclase m\u00e1s espec\u00edfica.","title":"ACTIVIDADES UNIDAD 5: DIAGRAMAS DE CLASES"},{"location":"clases/#actividades-unidad-5-diagramas-de-clases","text":"","title":"ACTIVIDADES UNIDAD 5: DIAGRAMAS DE CLASES"},{"location":"clases/#uml","text":"","title":"UML"},{"location":"clases/#1-que-significan-las-siglas-uml-busca-informacion-acerca-de-su-historia-y-las-versiones-que-han-existido-y-el-ano-de-publicacion","text":"UML se refiere a Lenguaje de Modelado Unificado, el cual fue creado por expertos en modelado de objetos en la d\u00e9cada de 1990 con la intenci\u00f3n de brindar un lenguaje com\u00fan para describir y representar sistemas de software. La primera versi\u00f3n de UML fue publicada en 1997 y ha habido una serie de actualizaciones desde entonces, incluidas UML 1.x, UML 2.0, UML 2.1, UML 2.2, UML 2.3, UML 2.4 y UML 2.5.","title":"1. \u00bfQu\u00e9 significan las siglas UML? Busca informaci\u00f3n acerca de su historia y las versiones que han existido y el a\u00f1o de publicaci\u00f3n."},{"location":"clases/#2-indica-los-tipos-de-diagramas-de-estructura-que-existen-en-uml","text":"En UML, los diagramas de estructura incluyen el Diagrama de Clases, el Diagrama de Objetos, el Diagrama de Componentes, el Diagrama de Paquetes, el Diagrama de Estructura de Componentes, y el Diagrama de Composici\u00f3n.","title":"2. Indica los tipos de diagramas de estructura que existen en UML."},{"location":"clases/#3-indica-los-tipos-de-relaciones-que-pueden-darse-y-explica-brevemente","text":"Los diagramas de comportamiento incluyen el Diagrama de Secuencia, el Diagrama de Colaboraci\u00f3n, el Diagrama de Estados, el Diagrama de Actividades, el Diagrama de Casos de Uso, y el Diagrama de Interacci\u00f3n.","title":"3. Indica los tipos de relaciones que pueden darse y explica brevemente."},{"location":"clases/#diagramas-de-clases","text":"","title":"DIAGRAMAS DE CLASES"},{"location":"clases/#1-siguiendo-la-notacion-uml-pon-2-ejemplos-de-clases-distintos-a-los-vistos-en-este-tema","text":"Clase \"Producto\" Atributos: idProducto, nombre, descripcion, precio, stock M\u00e9todos: agregarStock(int cantidad), disminuirStock(int cantidad), calcularPrecioOferta(float descuento) Clase \"OrdenDeCompra\" Atributos: idOrden, fecha, proveedor, total M\u00e9todos: agregarProducto(Producto p, int cantidad), eliminarProducto(Producto p), calcularTotal(), enviarOrden()","title":"1. Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de clases distintos a los vistos en este tema."},{"location":"clases/#2-siguiendo-la-notacion-uml-pon-2-ejemplos-de-interfaces-distintos-a-los-vistos-en-este-tema","text":"Interfaz \"Pagar\" M\u00e9todos: realizarPago(float monto), obtenerTotal(), cancelarPago() Interfaz \"Autenticar\" M\u00e9todos: iniciarSesion(String usuario, String contrase\u00f1a), cerrarSesion(), cambiarContrase\u00f1a(String nuevaContrase\u00f1a)","title":"2. Siguiendo la notaci\u00f3n UML, pon 2 ejemplos de interfaces distintos a los vistos en este tema."},{"location":"clases/#3-indica-los-tipos-de-relaciones-que-pueden-darse-y-explica-brevemente_1","text":"Asociaci\u00f3n: Es una relaci\u00f3n b\u00e1sica que indica que dos elementos est\u00e1n relacionados de alguna manera. Se puede especificar la multiplicidad, que indica cu\u00e1ntos objetos de cada clase pueden estar relacionados. Herencia: Es una relaci\u00f3n en la que una clase hereda atributos y m\u00e9todos de otra clase (clase padre). La clase que hereda se conoce como clase hija o subclase. Dependencia: Es una relaci\u00f3n en la que un elemento de modelo depende de otro elemento para su especificaci\u00f3n o implementaci\u00f3n. Por ejemplo, una clase puede depender de una interfaz para implementar sus m\u00e9todos. Agregaci\u00f3n: Es una relaci\u00f3n de tipo \"todo-parte\" en la que una clase contiene una colecci\u00f3n de objetos de otra clase, pero los objetos pueden existir fuera de la clase contenedora. Composici\u00f3n: Es una relaci\u00f3n similar a la agregaci\u00f3n, pero los objetos de la clase contenida son parte integral de la clase contenedora y no pueden existir fuera de ella. Realizaci\u00f3n: Es una relaci\u00f3n en la que una clase implementa los m\u00e9todos de una interfaz. Generalizaci\u00f3n: Es una relaci\u00f3n entre dos elementos de modelo, donde uno es un caso especial del otro. En otras palabras, una clase m\u00e1s general puede ser especializada en una subclase m\u00e1s espec\u00edfica.","title":"3. Indica los tipos de relaciones que pueden darse y explica brevemente."},{"location":"controlVersiones/","text":"Control de versiones 1. Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen? CVS, Subversion o Mercurial 2. En Git, \u00bfqu\u00e9 tres \u00e1reas existen? El directorio de Git (Git directory), el directorio de trabajo (working directory), y el \u00e1rea de preparaci\u00f3n (staging area). 5. En Git, \u00bfpara qu\u00e9 sirve el comando git config ? Para definir valores de configuraci\u00f3n de Git a nivel de un proyecto global o local. 6. En Git, \u00bfpara qu\u00e9 sirve el comando git init ? Para crear un nuevo repositorio de Git. 7. En Git, \u00bfpara qu\u00e9 sirve el comando git clone ? Se utiliza principalmente para apuntar a un repositorio existente y clonar o copiar dicho repositorio en un nuevo directorio, en otra ubicaci\u00f3n. 8. En Git, \u00bfpara qu\u00e9 sirve el comando git status ? Para mostrar el estado del directorio de trabajo y del \u00e1rea del entorno de ensayo. 9. En Git, \u00bfpara qu\u00e9 sirve el comando git add ? Para a\u00f1adir un cambio del directorio de trabajo en el entorno de ensayo. 10. En Git, \u00bfpara qu\u00e9 sirve el comando git commit ? Para confirmar una instant\u00e1nea del directorio del entorno de ensayo en el historial de confirmaciones de los repositorios. 11. En Git, \u00bfpara qu\u00e9 sirve el comando git log ? Para explorar el historial del repositorio. 12. En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo ? Para deshacer los cambios locales en el estado de un repositorio de Git. Act\u00faa en el historial de confirmaciones (HEAD). 13. En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo ? Te permite deshacer cambios en un archivo concreto. 15. En Git, \u00bfpara qu\u00e9 sirve el comando git branch ? Sirve para crear, enumerar y eliminar ramas, as\u00ed como cambiar su nombre. 16. En Git, \u00bfpara qu\u00e9 sirve el comando git checkout ? Te permite desplazarte entre las ramas creadas por git branch . 17. En Git, \u00bfpara qu\u00e9 sirve el comando git merge ? Te permite tomar las l\u00edneas independientes de desarrollo creadas por git branch e integrarlas en una sola rama. 18. En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. Lo que hace es acelerar el flujo de trabajo en el proceso del proyecto. Esto lo consigue mediante la armonizaci\u00f3n de la rama principal del proyecto, con las modificaciones resultantes de la creaci\u00f3n de una rama feature con determinadas especificaciones de cambios. Destaca por su capacidad de cambiar el *HEAD* en el sistema.","title":"Control de versiones"},{"location":"controlVersiones/#control-de-versiones","text":"","title":"Control de versiones"},{"location":"controlVersiones/#1-ademas-de-git-que-otros-sistemas-de-control-de-versiones-existen","text":"CVS, Subversion o Mercurial","title":"1. Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen?"},{"location":"controlVersiones/#2-en-git-que-tres-areas-existen","text":"El directorio de Git (Git directory), el directorio de trabajo (working directory), y el \u00e1rea de preparaci\u00f3n (staging area).","title":"2. En Git, \u00bfqu\u00e9 tres \u00e1reas existen?"},{"location":"controlVersiones/#5-en-git-para-que-sirve-el-comando-git-config","text":"Para definir valores de configuraci\u00f3n de Git a nivel de un proyecto global o local.","title":"5. En Git, \u00bfpara qu\u00e9 sirve el comando git config?"},{"location":"controlVersiones/#6-en-git-para-que-sirve-el-comando-git-init","text":"Para crear un nuevo repositorio de Git.","title":"6. En Git, \u00bfpara qu\u00e9 sirve el comando git init?"},{"location":"controlVersiones/#7-en-git-para-que-sirve-el-comando-git-clone","text":"Se utiliza principalmente para apuntar a un repositorio existente y clonar o copiar dicho repositorio en un nuevo directorio, en otra ubicaci\u00f3n.","title":"7. En Git, \u00bfpara qu\u00e9 sirve el comando git clone?"},{"location":"controlVersiones/#8-en-git-para-que-sirve-el-comando-git-status","text":"Para mostrar el estado del directorio de trabajo y del \u00e1rea del entorno de ensayo.","title":"8. En Git, \u00bfpara qu\u00e9 sirve el comando git status?"},{"location":"controlVersiones/#9-en-git-para-que-sirve-el-comando-git-add","text":"Para a\u00f1adir un cambio del directorio de trabajo en el entorno de ensayo.","title":"9. En Git, \u00bfpara qu\u00e9 sirve el comando git add?"},{"location":"controlVersiones/#10-en-git-para-que-sirve-el-comando-git-commit","text":"Para confirmar una instant\u00e1nea del directorio del entorno de ensayo en el historial de confirmaciones de los repositorios.","title":"10. En Git, \u00bfpara qu\u00e9 sirve el comando git commit?"},{"location":"controlVersiones/#11-en-git-para-que-sirve-el-comando-git-log","text":"Para explorar el historial del repositorio.","title":"11. En Git, \u00bfpara qu\u00e9 sirve el comando git log?"},{"location":"controlVersiones/#12-en-git-para-que-sirve-el-comando-git-reset-head-nombrearchivo","text":"Para deshacer los cambios locales en el estado de un repositorio de Git. Act\u00faa en el historial de confirmaciones (HEAD).","title":"12. En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo?"},{"location":"controlVersiones/#13-en-git-para-que-sirve-el-comando-git-checkout-nombrearchivo","text":"Te permite deshacer cambios en un archivo concreto.","title":"13. En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo?"},{"location":"controlVersiones/#15-en-git-para-que-sirve-el-comando-git-branch","text":"Sirve para crear, enumerar y eliminar ramas, as\u00ed como cambiar su nombre.","title":"15. En Git, \u00bfpara qu\u00e9 sirve el comando git branch?"},{"location":"controlVersiones/#16-en-git-para-que-sirve-el-comando-git-checkout","text":"Te permite desplazarte entre las ramas creadas por git branch .","title":"16. En Git, \u00bfpara qu\u00e9 sirve el comando git checkout?"},{"location":"controlVersiones/#17-en-git-para-que-sirve-el-comando-git-merge","text":"Te permite tomar las l\u00edneas independientes de desarrollo creadas por git branch e integrarlas en una sola rama.","title":"17. En Git, \u00bfpara qu\u00e9 sirve el comando git merge?"},{"location":"controlVersiones/#18-en-git-explica-como-funciona-la-fusion-merge-de-tipo-fast-forward","text":"Lo que hace es acelerar el flujo de trabajo en el proceso del proyecto. Esto lo consigue mediante la armonizaci\u00f3n de la rama principal del proyecto, con las modificaciones resultantes de la creaci\u00f3n de una rama feature con determinadas especificaciones de cambios. Destaca por su capacidad de cambiar el *HEAD* en el sistema.","title":"18. En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward."},{"location":"optimizacion/","text":"OPTIMIZACI\u00d3N 1. \u00bfQu\u00e9 se entiende por hendiodez del c\u00f3digo? Pon al menos 5 ejemplos. La hediondez del c\u00f3digo (code smell en ingl\u00e9s) se refiere a una serie de se\u00f1ales o indicadores que sugieren que un c\u00f3digo fuente puede tener problemas de dise\u00f1o o arquitectura que podr\u00edan afectar su calidad, mantenibilidad y escalabilidad. Algunos ejemplos comunes de hediondez del c\u00f3digo son: Duplicaci\u00f3n de c\u00f3digo: cuando hay fragmentos de c\u00f3digo repetidos en diferentes lugares del programa, lo que aumenta la complejidad y el riesgo de errores. M\u00e9todos o funciones demasiado largos: cuando una funci\u00f3n o m\u00e9todo es demasiado extenso y realiza m\u00faltiples tareas, lo que dificulta la lectura y el mantenimiento del c\u00f3digo. Clases con demasiadas responsabilidades: cuando una clase tiene m\u00faltiples tareas o responsabilidades, lo que hace que sea dif\u00edcil de entender, modificar y reutilizar. Mal uso de estructuras de datos: cuando se utilizan estructuras de datos ineficientes o inadecuadas para el problema en cuesti\u00f3n, lo que puede afectar el rendimiento y la escalabilidad del programa. C\u00f3digo poco legible o comentado: cuando el c\u00f3digo es dif\u00edcil de leer, no sigue convenciones de nomenclatura, o no est\u00e1 suficientemente documentado, lo que dificulta la comprensi\u00f3n y el mantenimiento. 2. \u00bfQu\u00e9 tipo de herramienta utilizamos para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo? Para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo se utiliza una herramienta llamada analizador de c\u00f3digo est\u00e1tico. Este tipo de herramienta examina el c\u00f3digo fuente en busca de problemas como duplicaci\u00f3n de c\u00f3digo, m\u00e9todos o funciones demasiado largos, clases con demasiadas responsabilidades, mal uso de estructuras de datos y c\u00f3digo poco legible o comentado. Ejemplos populares de analizadores de c\u00f3digo est\u00e1tico son SonarQube, ESLint, Pylint, FindBugs y Checkstyle. 3. \u00bfQu\u00e9 sitios web nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection ? Existen varias herramientas y sitios web que nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection. Algunos de ellos son: SonarQube: Es una plataforma de an\u00e1lisis est\u00e1tico de c\u00f3digo que ofrece una amplia gama de caracter\u00edsticas para mejorar la calidad del c\u00f3digo y detectar problemas. Soporta varios lenguajes de programaci\u00f3n, como Java, C/C++, JavaScript, Python, entre otros. Codacy: Ofrece an\u00e1lisis de c\u00f3digo est\u00e1tico y una amplia variedad de caracter\u00edsticas para mejorar la calidad del c\u00f3digo y la productividad del equipo. Soporta una gran variedad de lenguajes de programaci\u00f3n. Code Climate: Ofrece an\u00e1lisis de c\u00f3digo est\u00e1tico, medici\u00f3n de la complejidad del c\u00f3digo y sugerencias para mejorar la calidad del c\u00f3digo. Soporta varios lenguajes de programaci\u00f3n, como Ruby, Python, JavaScript, entre otros. ESLint: Es una herramienta de an\u00e1lisis de c\u00f3digo para JavaScript que ayuda a detectar errores y problemas en el c\u00f3digo. Es altamente configurable y se puede integrar con varias herramientas de construcci\u00f3n y automatizaci\u00f3n de tareas. Pylint: Es una herramienta de an\u00e1lisis de c\u00f3digo para Python que verifica el estilo y la calidad del c\u00f3digo, y ayuda a detectar problemas y errores en el c\u00f3digo. 4. Instala en IDEA el plugin SpotBugs, si no lo tienes a\u00fan instalado. 7. \u00bfQu\u00e9 es la refactorizaci\u00f3n? La refactorizaci\u00f3n es una t\u00e9cnica utilizada en desarrollo de software para mejorar la calidad, legibilidad y mantenibilidad del c\u00f3digo sin alterar su comportamiento externo. Se realiza con el objetivo de mejorar el dise\u00f1o, eliminar c\u00f3digo innecesario, mejorar el rendimiento y la eficiencia, y reducir la complejidad del c\u00f3digo. Es una t\u00e9cnica que se puede aplicar en cualquier etapa del ciclo de vida del software y debe ser realizada de manera cuidadosa y planificada. 8. \u00bfQu\u00e9 t\u00e9cnicas se utilizan a menudo a la hora de refactorizar? Existen diversas t\u00e9cnicas que se utilizan a menudo a la hora de refactorizar el c\u00f3digo fuente de un programa. Algunas de las m\u00e1s comunes son: Extracci\u00f3n de m\u00e9todos: consiste en extraer una secci\u00f3n de c\u00f3digo que se repite varias veces dentro de una clase o m\u00e9todo y convertirla en un m\u00e9todo separado que pueda ser reutilizado en otras partes del programa. Renombrado de variables y m\u00e9todos: consiste en cambiar los nombres de variables y m\u00e9todos a nombres m\u00e1s descriptivos que reflejen mejor su funci\u00f3n en el programa. Eliminaci\u00f3n de c\u00f3digo duplicado: consiste en eliminar secciones de c\u00f3digo que se repiten innecesariamente en distintas partes del programa. Simplificaci\u00f3n de estructuras de control: consiste en simplificar estructuras de control de flujo, como if/else, switch/case o bucles, para hacer el c\u00f3digo m\u00e1s legible y f\u00e1cil de entender. Separaci\u00f3n de responsabilidades: consiste en dividir el c\u00f3digo en m\u00f3dulos o clases m\u00e1s peque\u00f1as y especializadas que se encarguen de tareas espec\u00edficas, con el objetivo de mejorar la cohesi\u00f3n y reducir la complejidad del programa.","title":"OPTIMIZACI\u00d3N"},{"location":"optimizacion/#optimizacion","text":"","title":"OPTIMIZACI\u00d3N"},{"location":"optimizacion/#1-que-se-entiende-por-hendiodez-del-codigo-pon-al-menos-5-ejemplos","text":"La hediondez del c\u00f3digo (code smell en ingl\u00e9s) se refiere a una serie de se\u00f1ales o indicadores que sugieren que un c\u00f3digo fuente puede tener problemas de dise\u00f1o o arquitectura que podr\u00edan afectar su calidad, mantenibilidad y escalabilidad. Algunos ejemplos comunes de hediondez del c\u00f3digo son: Duplicaci\u00f3n de c\u00f3digo: cuando hay fragmentos de c\u00f3digo repetidos en diferentes lugares del programa, lo que aumenta la complejidad y el riesgo de errores. M\u00e9todos o funciones demasiado largos: cuando una funci\u00f3n o m\u00e9todo es demasiado extenso y realiza m\u00faltiples tareas, lo que dificulta la lectura y el mantenimiento del c\u00f3digo. Clases con demasiadas responsabilidades: cuando una clase tiene m\u00faltiples tareas o responsabilidades, lo que hace que sea dif\u00edcil de entender, modificar y reutilizar. Mal uso de estructuras de datos: cuando se utilizan estructuras de datos ineficientes o inadecuadas para el problema en cuesti\u00f3n, lo que puede afectar el rendimiento y la escalabilidad del programa. C\u00f3digo poco legible o comentado: cuando el c\u00f3digo es dif\u00edcil de leer, no sigue convenciones de nomenclatura, o no est\u00e1 suficientemente documentado, lo que dificulta la comprensi\u00f3n y el mantenimiento.","title":"1. \u00bfQu\u00e9 se entiende por hendiodez del c\u00f3digo? Pon al menos 5 ejemplos."},{"location":"optimizacion/#2-que-tipo-de-herramienta-utilizamos-para-hacer-analisis-estatico-del-codigo","text":"Para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo se utiliza una herramienta llamada analizador de c\u00f3digo est\u00e1tico. Este tipo de herramienta examina el c\u00f3digo fuente en busca de problemas como duplicaci\u00f3n de c\u00f3digo, m\u00e9todos o funciones demasiado largos, clases con demasiadas responsabilidades, mal uso de estructuras de datos y c\u00f3digo poco legible o comentado. Ejemplos populares de analizadores de c\u00f3digo est\u00e1tico son SonarQube, ESLint, Pylint, FindBugs y Checkstyle.","title":"2. \u00bfQu\u00e9 tipo de herramienta utilizamos para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo?"},{"location":"optimizacion/#3-que-sitios-web-nos-permiten-hacer-analisis-estatico-del-codigo-o-continuous-inspection","text":"Existen varias herramientas y sitios web que nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection. Algunos de ellos son: SonarQube: Es una plataforma de an\u00e1lisis est\u00e1tico de c\u00f3digo que ofrece una amplia gama de caracter\u00edsticas para mejorar la calidad del c\u00f3digo y detectar problemas. Soporta varios lenguajes de programaci\u00f3n, como Java, C/C++, JavaScript, Python, entre otros. Codacy: Ofrece an\u00e1lisis de c\u00f3digo est\u00e1tico y una amplia variedad de caracter\u00edsticas para mejorar la calidad del c\u00f3digo y la productividad del equipo. Soporta una gran variedad de lenguajes de programaci\u00f3n. Code Climate: Ofrece an\u00e1lisis de c\u00f3digo est\u00e1tico, medici\u00f3n de la complejidad del c\u00f3digo y sugerencias para mejorar la calidad del c\u00f3digo. Soporta varios lenguajes de programaci\u00f3n, como Ruby, Python, JavaScript, entre otros. ESLint: Es una herramienta de an\u00e1lisis de c\u00f3digo para JavaScript que ayuda a detectar errores y problemas en el c\u00f3digo. Es altamente configurable y se puede integrar con varias herramientas de construcci\u00f3n y automatizaci\u00f3n de tareas. Pylint: Es una herramienta de an\u00e1lisis de c\u00f3digo para Python que verifica el estilo y la calidad del c\u00f3digo, y ayuda a detectar problemas y errores en el c\u00f3digo.","title":"3. \u00bfQu\u00e9 sitios web nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection?"},{"location":"optimizacion/#4-instala-en-idea-el-plugin-spotbugs-si-no-lo-tienes-aun-instalado","text":"","title":"4. Instala en IDEA el plugin SpotBugs, si no lo tienes a\u00fan instalado."},{"location":"optimizacion/#7-que-es-la-refactorizacion","text":"La refactorizaci\u00f3n es una t\u00e9cnica utilizada en desarrollo de software para mejorar la calidad, legibilidad y mantenibilidad del c\u00f3digo sin alterar su comportamiento externo. Se realiza con el objetivo de mejorar el dise\u00f1o, eliminar c\u00f3digo innecesario, mejorar el rendimiento y la eficiencia, y reducir la complejidad del c\u00f3digo. Es una t\u00e9cnica que se puede aplicar en cualquier etapa del ciclo de vida del software y debe ser realizada de manera cuidadosa y planificada.","title":"7. \u00bfQu\u00e9 es la refactorizaci\u00f3n?"},{"location":"optimizacion/#8-que-tecnicas-se-utilizan-a-menudo-a-la-hora-de-refactorizar","text":"Existen diversas t\u00e9cnicas que se utilizan a menudo a la hora de refactorizar el c\u00f3digo fuente de un programa. Algunas de las m\u00e1s comunes son: Extracci\u00f3n de m\u00e9todos: consiste en extraer una secci\u00f3n de c\u00f3digo que se repite varias veces dentro de una clase o m\u00e9todo y convertirla en un m\u00e9todo separado que pueda ser reutilizado en otras partes del programa. Renombrado de variables y m\u00e9todos: consiste en cambiar los nombres de variables y m\u00e9todos a nombres m\u00e1s descriptivos que reflejen mejor su funci\u00f3n en el programa. Eliminaci\u00f3n de c\u00f3digo duplicado: consiste en eliminar secciones de c\u00f3digo que se repiten innecesariamente en distintas partes del programa. Simplificaci\u00f3n de estructuras de control: consiste en simplificar estructuras de control de flujo, como if/else, switch/case o bucles, para hacer el c\u00f3digo m\u00e1s legible y f\u00e1cil de entender. Separaci\u00f3n de responsabilidades: consiste en dividir el c\u00f3digo en m\u00f3dulos o clases m\u00e1s peque\u00f1as y especializadas que se encarguen de tareas espec\u00edficas, con el objetivo de mejorar la cohesi\u00f3n y reducir la complejidad del programa.","title":"8. \u00bfQu\u00e9 t\u00e9cnicas se utilizan a menudo a la hora de refactorizar?"}]}